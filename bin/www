#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Ninnodoppam:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
}

//Additional info

// When successfully connected
mongoose.connection.on('connected',
    function () {
        /*connection.load(function (error) {
         if (error) {
         throw error;
         }
         else {*/
        console.log("DB connected");
        /*}
         });*/
    }
);

// If the connection throws an error
mongoose.connection.on('error', function (err) {
    //if (develop.DEBUG) {
    console.log('Mongoose default connection error: ' + err);
    //}
});

// When the connection is disconnected
mongoose.connection.on('disconnected', function () {
    //if (develop.CFLOW) {
    console.log('Mongoose default connection disconnected');
    //}
});

// If the Node process ends, close the Mongoose connection
process.on('SIGINT', function () {
    mongoose.connection.close(function () {
        //if (develop.DEBUG) {
        console.log('Mongoose default connection disconnecting through app termination');
        //}
        process.exit(0);
    });
});

//additional sections that are absolutely NOT necessary

process.stdin.resume();
process.stdin.setEncoding('utf8');
process.stdin.on('data', function (data) {
    process.stdout.write('piped data received' + "\n");
    process.stdout.write(data);
});

var args = process.argv.slice(2);
console.log('command line arguments received');
console.log(args);